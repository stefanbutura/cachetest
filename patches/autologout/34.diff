diff --git a/src/EventSubscriber/AutologoutSubscriber.php b/src/EventSubscriber/AutologoutSubscriber.php
index 82a4ea304c75e66161aa82317f8b77f3e21fc01e..4c9080af9736c93b596e2eceaa0356a060095f26 100644
--- a/src/EventSubscriber/AutologoutSubscriber.php
+++ b/src/EventSubscriber/AutologoutSubscriber.php
@@ -118,41 +118,19 @@ class AutologoutSubscriber implements EventSubscriberInterface {
     }
 
     // If user is not anonymous.
-    if ($uid != 0) {
-      $session = $this->requestStack->getCurrentRequest()->getSession();
-      $auto_redirect = $session->get('auto_redirect');
-
-      // Get http referer.
-      $referer = "";
-      $request = $this->requestStack->getCurrentRequest();
-      if ($request->server->get('HTTP_REFERER')) {
-        $referer = $request->server->get('HTTP_REFERER');
-      }
-      // Get query string from http referer url.
-      $parse_url = parse_url($referer, PHP_URL_QUERY);
-      // If http referer url has 'destination' and session is not set,
-      // then only redirect to user page if uid dosen't match.
-      if ($parse_url !== NULL && (strpos($parse_url, 'destination') !== FALSE) && empty($auto_redirect)) {
-        parse_str($parse_url, $output);
-        $destination_uid = explode("/", $output['destination']);
-
-        // If array contains language code, remove it.
-        $languagecode = $this->languageManager->getCurrentLanguage()->getId();
-        if ($destination_uid[1] === $languagecode) {
-          unset($destination_uid[1]);
-          $destination_uid = array_values($destination_uid);
-        }
-
-        // If destination uid and actual uid does not match then,
-        // redirect to loggedin user page.
-        if (($destination_uid[1] == "user") && ($destination_uid[2] != $uid)) {
-          $auto_redirect = $session->set('auto_redirect', 1);
-          $login_url = Url::fromRoute('user.page', [], ['absolute' => TRUE])->toString();
-
-          // Redirect user to user page.
-          $response = new RedirectResponse($login_url);
-          $event->setResponse($response);
-        }
+    $session = $this->requestStack->getCurrentRequest()->getSession();
+    $auto_redirect = $session->get('auto_redirect');
+
+    // If http referer url has 'destination' and session is not set,
+    // then only redirect to user page if uid doesn't match.
+    if (empty($auto_redirect) && ($destination = $this->getDestination())) {
+      if (strpos($destination, 'user') !== FALSE) {
+        $session->set('auto_redirect', 1);
+        $login_url = Url::fromRoute('user.page', [], ['absolute' => TRUE])->toString();
+
+        // Redirect user to user page.
+        $response = new RedirectResponse($login_url);
+        $event->setResponse($response);
       }
     }
 
@@ -201,4 +179,23 @@ class AutologoutSubscriber implements EventSubscriberInterface {
     return $events;
   }
 
+  /**
+   * Get destination from referer.
+   *
+   * @return string|null
+   *   The destination query string or null.
+   */
+  private function getDestination(): ?string {
+    $request = $this->requestStack->getCurrentRequest();
+    if (!$referer = $request->server->get('HTTP_REFERER')) {
+      return NULL;
+    }
+    // Get query string from http referer url.
+    $referer_parts = parse_url($referer, PHP_URL_QUERY);
+    if (!empty($referer_parts) && str_contains($referer_parts, 'destination')) {
+      return $referer_parts;
+    }
+    return FALSE;
+  }
+
 }
diff --git a/tests/src/FunctionalJavascript/UserDestinationLogoutTest.php b/tests/src/FunctionalJavascript/UserDestinationLogoutTest.php
new file mode 100644
index 0000000000000000000000000000000000000000..44c0219116ed1b31f95e8b5988717453a7f058b2
--- /dev/null
+++ b/tests/src/FunctionalJavascript/UserDestinationLogoutTest.php
@@ -0,0 +1,97 @@
+<?php
+
+namespace Drupal\Tests\autologout\FunctionalJavascript;
+
+use Drupal\Core\Config\Config;
+use Drupal\Core\Url;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\user\Entity\User;
+
+/**
+ * Tests that user is redirected to its own profile.
+ *
+ * @group Autologout
+ */
+class UserDestinationLogoutTest extends WebDriverTestBase {
+  /**
+   * Modules to enable.
+   *
+   * @var array
+   */
+  protected static $modules = [
+    'system',
+    'user',
+    'autologout',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * Config factory.
+   *
+   * @var \Drupal\Core\Config\Config
+   */
+  protected Config $moduleConfig;
+
+  /**
+   * User to logout.
+   *
+   * @var bool|\Drupal\user\Entity\User|false
+   */
+  protected $privilegedUser;
+
+  /**
+   * User to login.
+   *
+   * @var \Drupal\user\Entity\User
+   */
+  protected User $testUser;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $this->baseUrl = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
+
+    $this->privilegedUser = $this->drupalCreateUser();
+    $this->testUser = $this->drupalCreateUser();
+
+    $this->moduleConfig = $this->container->get('config.factory')->getEditable('autologout.settings');
+
+    // For testing purposes set the timeout to 5 seconds.
+    $this->moduleConfig->set('timeout', 5)->set('padding', 2)->save();
+
+    $this->drupalLogin($this->privilegedUser);
+  }
+
+  /**
+   * Tests that redirection is correct when destination is set.
+   *
+   * If destination is set for user/login test that user is redirected to its
+   * own profile when logged in again.
+   */
+  public function testDestinationUserLogout(): void {
+    // Check that first user is logged in.
+    self::assertTrue($this->drupalUserIsLoggedIn($this->privilegedUser));
+    $this->drupalGet('user/' . $this->privilegedUser->id());
+    // Used later because of the way that the url is built.
+    $user_uri = Url::fromRoute('entity.user.canonical', ['user' => $this->privilegedUser->id()])->toString();
+    // Wait for timeout.
+    $this->getSession()->wait(10000);
+    // Check that destination is set after logout and privilegedUser user
+    // is logged out.
+    $this->assertSession()->addressEquals($this->getUrl());
+    $this->assertStringContainsString('/user/login?destination=' . $user_uri, $this->getSession()->getCurrentUrl());
+    self::assertFalse($this->drupalUserIsLoggedIn($this->privilegedUser));
+
+    // Login testUser and check that user was redirected to its own profile.
+    $this->drupalLogin($this->testUser);
+    $this->assertSession()->addressEquals($this->baseUrl . '/user/' . $this->testUser->id());
+  }
+
+}
